/* File: spkmeans_galois.cpp
 *
 * Defines the Galois version of the SKPMeans class. This version directly
 * uses the Galois parallel library for multithreaded computation to speed
 * up the algorithm's runtime on multicore systems.
 */

#include "spkmeans.h"

#include <functional>
#include <iostream>
#include <mutex>

#include "Galois/Galois.h"
#include "Galois/Timer.h"
#include "llvm/ADT/SmallVector.h"

#include <boost/iterator/counting_iterator.hpp>

using namespace std;



// Constructor: set number of threads and initialize Galois.
SPKMeansGalois::SPKMeansGalois(
    float **doc_matrix_, int k_, int dc_, int wc_, unsigned int t_)
    : SPKMeans::SPKMeans(doc_matrix_, k_, dc_, wc_)
{
    // if number of threads given is <= 0, set to max
    if(t_ <= 0)
        t_ = 2; // TODO - no support in API for this?
    Galois::setActiveThreads(t_);
    num_threads = Galois::getActiveThreads();
}


// Returns the actual number of threads that Galois will use.
unsigned int SPKMeansGalois::getNumThreads()
{
    return num_threads;
}



// Galois computation struct for calculating new partitions.
// TODO - use Galois data structures to avoid Mutex?
struct ComputePartitions {

    // keep track of the algorithm matrices and vectors
    ClusterData *data;
    float **doc_matrix;
    mutex *mut;

    // keep track of the new partitions generated by the operation function
    vector<float*> *new_partitions;

    // binding for the cosineSimilarity function in the SPKMeans object
    function<float(float*, int)> cosineSimilarity;


    // constructor: get the cluster data pointers
    ComputePartitions(ClusterData *data_, float **doc_matrix_)
        : data(data_), doc_matrix(doc_matrix_)
    {
        new_partitions = 0;
        mut = new mutex();
    }
    
    // clear memory: delete the mutex
    // can't put in destructor because Galois keeps calling it...?
    void clearMemory()
    {
        delete mut;
    }
    
    // clear out the new_partitions vector for new computations
    // TODO - memory leak: delete the old one
    void prepare()
    {
        new_partitions = new vector<float*>[data->k];
    }


    // Compute the new partitions:
    void operator () (int &i, Galois::UserContext<int> &ctx)
        //Galois::Runtime::UserContextAccess<float*>::SuperTy &ctx)
    {
        // get pointers to everything from the data struct
        int k = data->k;
        float **concepts = data->concepts;
        bool *changed = data->changed;
        float *cValues = data->cValues;

        // find the best partition for document i
        int cIndx = 0;
        if(changed[0])
            cValues[i*k] = cosineSimilarity(concepts[0], i);
        for(int j=1; j<k; j++) {
            if(changed[j])
                cValues[i*k + j] = cosineSimilarity(concepts[j], i);
            if(cValues[i*k + j] > cValues[i*k + cIndx])
                cIndx = j;
        }

        // add the document to the partition (race condition region):
        // TODO - Galois should handle the race condition!
        mut->lock();
        new_partitions[cIndx].push_back(doc_matrix[i]);
        mut->unlock();
    }
};



// Galois computation struct for calculating new concept vectors.
struct ComputeConcepts {

    // keep track of the cluster data arrays
    ClusterData *data;

    // binding for the computeConcept function in the SPKMeans object
    function<float*(float**, int)> computeConcept;

    // constructor: get the cluster data pointers
    ComputeConcepts(ClusterData *data_) : data(data_) {}
    
    // Compute the new concept vectors
    void operator () (int &i, Galois::UserContext<int> &ctx) {
        if(data->changed[i]) {
            delete[] data->concepts[i];
            data->concepts[i] = computeConcept(data->partitions[i],
                                               data->p_sizes[i]);
        }
    }
};



// Run the spherical K-means algorithm using the Galois library.
ClusterData* SPKMeansGalois::runSPKMeans()
{
    // keep track of the run time of this algorithm
    Galois::Timer timer;
    timer.start();

    // apply the TXN scheme on the document vectors (normalize them)
    txnScheme();

    // initialize the data arrays
    ClusterData *data = new ClusterData(k, dc, wc);

    // choose an initial partitioning, and get first concepts
    initPartitions(data);


    // create the Galois computation structs, and bind the necessary functions
    ComputePartitions cP(data, doc_matrix);
    cP.cosineSimilarity = bind(&SPKMeans::cosineSimilarity,
                               this, // use this object's instance variables
                               placeholders::_1, placeholders::_2);
    ComputeConcepts cC(data);
    cC.computeConcept = bind(&SPKMeans::computeConcept,
                             this, // use this object's instance variables
                             placeholders::_1, placeholders::_2);
    

    // keep track of all individual component times for analysis
    Galois::Timer ptimer;
    Galois::Timer ctimer;
    Galois::Timer qtimer;
    float p_time = 0;
    float c_time = 0;
    float q_time = 0;

    // compute initial quality
    float quality = computeQ(data);
    cout << "Initial quality: " << quality << endl;

    // set up iterators for use by the Galois loops
    auto start_any = boost::make_counting_iterator<int>(0);
    auto end_dc = boost::make_counting_iterator<int>(dc);
    auto end_k = boost::make_counting_iterator<int>(k);

    // do spherical k-means loop
    float dQ = Q_THRESHOLD * 10;
    int iterations = 0;
    while(dQ > Q_THRESHOLD) {
        iterations++;

        // compute new partitions based on old concept vectors
        ptimer.start();
        cP.prepare();
        Galois::for_each(start_any, end_dc, cP,
            Galois::loopname("Compute Partitions"));
        ptimer.stop();
        p_time += ptimer.get();

        // check if partitions changed since last time
        findChangedPartitionsUnordered(cP.new_partitions, data);

        // transfer new partitions to the partitions array
        copyPartitions(cP.new_partitions, data);

        // compute new concept vectors
        ctimer.start();
        Galois::for_each(start_any, end_k, cC,
            Galois::loopname("Compute Concepts"));
        ctimer.stop();
        c_time += ctimer.get();

        // compute quality of new partitioning
        qtimer.start();
        float n_quality = computeQ(data);
        dQ = n_quality - quality;
        quality = n_quality;
        qtimer.stop();
        q_time += qtimer.get();

        // report quality and (if optimizing) which partitions changed
        reportQuality(data, quality, dQ);
    }


    // report runtime statistics
    timer.stop();
    reportTime(iterations, timer.get(), p_time, c_time, q_time);

    // clean up
    cP.clearMemory();

    // return the resulting partitions and concepts in the ClusterData struct
    return data;
}
